# -*- coding: utf-8 -*-
"""StockKelly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sgQOUTu8-x8mv0NA6XjVwmpm5rBei0nT
"""

#! python3

from pandas.util.testing import assert_frame_equal
from pandas_datareader import data as wb
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from datetime import datetime
import os
import csv  


#dt = wb.DataReader('FB', 'google', start, end)
end_date = str(datetime.now().strftime('%Y-%m-%d'))

BASE = 'http://finance.google.com/finance/historical'

stocks = [
    {'ticker' : 'GOLD',
    'name': 'GOLD'
    },
    {'ticker' : 'AAPL',
    'name': 'AAPL'
    },
    {'ticker' : 'AUY',
    'name': 'AUY'
    },
    {'ticker' : 'MSFT',
    'name': 'MSFT'
    },
    {'ticker' : 'PBR',
    'name': 'PBR'
    },
    {'ticker' : 'WMT',
    'name': 'WMT'
    },
    {'ticker' : 'AMZN',
    'name': 'AMZN'
    },
    {'ticker' : 'BABA',
    'name': 'BABA'
    },
    
    
]


def create_plot(stocks):
    data = pd.DataFrame()
    for stock in stocks:

        data[stock['ticker']] = wb.DataReader(stock["ticker"],data_source= 'yahoo' ,start = '2014-09-19',end = end_date)['Adj Close']
        data1 = (data)
    
    #returns = data.apply(lambda x: (x /  x[0] * 100))
    returns = data1
    

    newpath = r'/content/sample_data/DataStock/' 
    if not os.path.exists(newpath):

      os.makedirs(newpath)
    data.to_csv(r'/content/sample_data/DataStock/stock.csv', sep= ":", decimal= "." )
    plt.figure(figsize=(10,6))

    for stock in stocks :
        plt.plot(returns[stock['ticker']],label = stock['name'])

    plt.legend()
    plt.xlabel('Time')
    plt.ylabel('cumulative returns (%)')
    plt.show ()
    

create_plot(stocks)

stock = pd.read_csv("/content/sample_data/DataStock/stock.csv",delimiter=':',dayfirst=True )

nombres=[]
for row in range(len(stock.columns)):
  nombres.append(stock.columns[row])


listadf=[]
df1 = pd.DataFrame(stock['Date'].tolist(),columns=['Date'])
listadf.append(df1)

for j in range(1,len(nombres)):
  listarendimiento=[]


  col_list = stock[nombres[j]].tolist()
  for i in range(0,len(col_list)-1):
     
      val1=col_list[i]
  
      val2=col_list[i+1]

      rendimiento = ((val2/val1)-1)*100

      listarendimiento.append(rendimiento)


  df3=pd.DataFrame(listarendimiento,columns=[nombres[j]])
  listadf.append(df3)
result = pd.concat(listadf, axis=1)

result.to_csv(r'/content/sample_data/DataStock/rendimientos.csv', sep= ":", decimal= "." ,index=False)

rendimientos = pd.read_csv("/content/sample_data/DataStock/rendimientos.csv",delimiter=':' )

nombres=[]
listadf=[]
for row in range(len(stock.columns)):
  nombres.append(stock.columns[row])

for j in range(1,len(nombres)):
  Ploss=0.0
  Prew=0.0
  listarPrew=[]
  col_list = rendimientos[nombres[j]].tolist()



  for i in range (len(col_list)):
  
    if col_list[i]>0:
      Prew=Prew+1
    else:
      Ploss=Ploss+1
  Prew=Prew/len(col_list)

  
  listarPrew.append(Prew)

  df=pd.DataFrame(listarPrew,columns=[nombres[j]])
  
  
  listadf.append(df)

 
  resultPREW = pd.concat(listadf, axis=1)

resultPREW.to_csv(r'/content/sample_data/DataStock/PREW.csv', sep= ":", decimal= "." ,index=False)

PREW = pd.read_csv("/content/sample_data/DataStock/PREW.csv",delimiter=':' )


listadfk=[]
for j in range(1,len(nombres)):
  
  Kellyv=[]
  
  col_list = PREW[nombres[j]]

  for i in range (len(col_list)):

    Kelly=col_list[i]-col_list[i]**2
    
    Kellyv.append(Kelly)

  dfK=pd.DataFrame(Kellyv,columns=[nombres[j]])
  
  
  listadfk.append(dfK)

 
  resultK = pd.concat(listadfk, axis=1)

resultK.to_csv(r'/content/sample_data/DataStock/Kelly.csv', sep= ":", decimal= "." ,index=False)

Kelly = pd.read_csv("/content/sample_data/DataStock/Kelly.csv",delimiter=':' )

sumKelly=0

for j in range(1,len(nombres)): 
    
  col_list = Kelly[nombres[j]]

  for i in range (len(col_list)):

    sumKelly=sumKelly+col_list[i]


listadfkadj=[]
for j in range(1,len(nombres)):
  
  Kellyvadj=[]
  
  col_list = Kelly[nombres[j]]

  for i in range (len(col_list)):

    Kellyadj=col_list[i]/sumKelly
    
    Kellyvadj.append(Kellyadj)

  dfKadj=pd.DataFrame(Kellyvadj,columns=[nombres[j]])
  
  
  listadfkadj.append(dfKadj)

 
  resultKadj = pd.concat(listadfkadj, axis=1)    

resultKadj

resultKadj.to_csv(r'/content/sample_data/DataStock/KellyAdj.csv', sep= ":", decimal= "." ,index=False)

# KellyAdj = pd.read_csv("/content/sample_data/DataStock/Kelly.csv",delimiter=':' )

# sumKellyasd=0 //para ver si esta bien la suma deberia dar 1
# for j in range(1,len(nombres)): 
    
#   col_list = resultKadj[nombres[j]]

#   for i in range (len(col_list)):

#     sumKellyasd=sumKellyasd+col_list[i]

# sumKellyasd

print('las proporciones kelly han sido calculadas ...')
capital_inicial=float(input('ingrese el valor de capital inicial'))
print('su capital inicial es:',capital_inicial)

import math
stock = pd.read_csv("/content/sample_data/DataStock/stock.csv",delimiter=':',dayfirst=True )
len(stock)
stock

lol=0

for j in range(len(nombres)):
    
   lol= stock.loc[len(stock)-1]

df=pd.DataFrame(lol)

df1=df.transpose()

del df1['Date']
df1.index=['Precio Acc']



KellyAdj = pd.read_csv("/content/sample_data/DataStock/KellyAdj.csv",delimiter=':' )

df1

df2=KellyAdj.index=['KellyAdj']
d = {}
for i in range(len(KellyAdj.columns)):
 
  divisor=df1.iloc[0][KellyAdj.columns[i]]
  dividendo=capital_inicial*KellyAdj.iloc[0][KellyAdj.columns[i]]

  valor=math.floor(dividendo/divisor)
  
  if valor < 1:
    valor = 1
  else:
    valor=valor

  d[KellyAdj.columns[i]] = valor


df3 = pd.DataFrame(data=d,index=['Acc x Kelly'])

df2=KellyAdj
suma = 0  
for i in range(len(KellyAdj.columns)):
 
  acc = df1.iloc[0][KellyAdj.columns[i]]

  accxkelly = df3.iloc[0][KellyAdj.columns[i]]

  suma = suma + acc*accxkelly
desvio =(capital_inicial-suma)

# print(desvio)
d1 = {}  
for i in range(len(KellyAdj.columns)):
 
  divisor=df1.iloc[0][KellyAdj.columns[i]]
  dividendo=desvio*KellyAdj.iloc[0][KellyAdj.columns[i]]

  valor=math.floor(dividendo/divisor)
  
 


  d1[KellyAdj.columns[i]] = valor

df4 = pd.DataFrame(data=d1,index=['desvio '+str(desvio)])



d3 = {}

d4={}
suma2 = 0   
for i in range(len(KellyAdj.columns)):
  
  accxkelly = df3.iloc[0][KellyAdj.columns[i]]
  desvio=df4.iloc[0][KellyAdj.columns[i]]
  
  valor = desvio + accxkelly

  
  
  if valor < 1:
    valor = 1
  else:
    valor=valor

  acc = df1.iloc[0][KellyAdj.columns[i]]

  reult=valor*acc

  d3[KellyAdj.columns[i]] = valor

  d4[KellyAdj.columns[i]] = reult

  suma2 = suma2 +reult  


df5 = pd.DataFrame(data=d3,index=['Gasto final $'+str(suma2)])

df6 = pd.DataFrame(data=d4,index=['Cartera ajustada '+str(suma2)])

desvio = capital_inicial-suma2

d5 = {}
for i in range(len(KellyAdj.columns)):
 
  divisor=df1.iloc[0][KellyAdj.columns[i]]
  dividendo=desvio*KellyAdj.iloc[0][KellyAdj.columns[i]]

  valor=math.floor(dividendo/divisor)
  
  if valor < 1:
    valor = 1
  else:
    valor=valor

  d5[KellyAdj.columns[i]] = valor

  


df7 = pd.DataFrame(data=d5,index=['Desvio '+str(desvio)])



frames = [df1, df2,df3,df4,df5,df6,df7]

result = pd.concat(frames)





result.to_csv(r'/content/sample_data/DataStock/cartera.csv', sep= ":", decimal= ".",index=True ,index_label='capital inicial US$'+str(capital_inicial))

cartera = pd.read_csv("/content/sample_data/DataStock/cartera.csv",delimiter=':' )


cartera

